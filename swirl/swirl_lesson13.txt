| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors         7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics             

Selection: 13

  |                                                                                                                  |   0%

| One of the great advantages of using a statistical programming language like R is its vast collection of tools for
| simulating random numbers.

...

  |====                                                                                                              |   3%

| This lesson assumes familiarity with a few common probability distributions, but these topics will only be discussed with
| respect to random number generation. Even if you have no prior experience with these concepts, you should be able to
| complete the lesson and understand the main ideas.

...

  |=======                                                                                                           |   6%

| The first function we'll use to generate random numbers is sample(). Use ?sample to pull up the documentation.

> ?sample

| Great job!

  |===========                                                                                                       |   9%

| Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).

> 
> sample(1:6, 4, replace=TRUE)
[1] 6 3 3 4

| Perseverance, that's the answer.

  |==============                                                                                                    |  12%

| Now repeat the command to see how your result differs. (The probability of rolling the exact same result is (1/6)^4 =
| 0.00077, which is pretty small!)

> sample(1:6, 4, replace=TRUE)
[1] 1 5 5 2

| Excellent job!

  |==================                                                                                                |  16%

| sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers between 1 and 6, WITH replacement. Sampling
| with replacement simply means that each number is "replaced" after it is selected, so that the same number can show up
| more than once. This is what we want here, since what you roll on one die shouldn't affect what you roll on any of the
| others.

...

  |=====================                                                                                             |  19%

| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without replacement, simply leave off the
| 'replace' argument.

> sample(1:6, 10)
Error in sample.int(length(x), size, replace, prob) : 
  cannot take a sample larger than the population when 'replace = FALSE'
> sample(1:6, 10, replace=FALSE)
Error in sample.int(length(x), size, replace, prob) : 
  cannot take a sample larger than the population when 'replace = FALSE'
> sample(1:20, 10)
 [1] 10  9 17  6 15 12 20  5 16  7

| Keep working like that and you'll get there!

  |=========================                                                                                         |  22%

| Since the last command sampled without replacement, no number appears more than once in the output.

...

  |============================                                                                                      |  25%

| LETTERS is a predefined variable in R containing a vector of all 26 letters of the English alphabet. Take a look at it
| now.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"

| You are quite good my friend!

  |================================                                                                                  |  28%

| The sample() function can also be used to permute, or rearrange, the elements of a vector. For example, try
| sample(LETTERS) to permute all 26 letters of the English alphabet.

> sample(LETTERS)
 [1] "K" "S" "G" "L" "X" "N" "W" "P" "H" "J" "M" "Y" "V" "Q" "E" "A" "T" "R" "D" "I" "B" "O" "U" "C" "Z" "F"

| Keep up the great work!

  |====================================                                                                              |  31%

| This is identical to taking a sample of size 26 from LETTERS, without replacement. When the 'size' argument to sample()
| is not specified, R takes a sample equal in size to the vector from which you are sampling.

...

  |=======================================                                                                           |  34%

| Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This particular coin has a 0.3 probability of
| landing 'tails' and a 0.7 probability of landing 'heads'.

...

  |===========================================                                                                       |  38%

| Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw a sample of size 100 from the
| vector c(0,1), with replacement. Since the coin is unfair, we must attach specific probabilities to the values 0 (tails)
| and 1 (heads) with a fourth argument, prob = c(0.3, 0.7). Assign the result to a new variable called flips.

> flips <- (c(0,1), 100, replace=TRUE, c(0.3, 0.7))
Error: unexpected ',' in "flips <- (c(0,1),"
> flips <- sample(c(0,1), 100, replace=TRUE, c(0.3, 0.7))

| All that hard work is paying off!

  |==============================================                                                                    |  41%

| View the contents of the flips variable.

> flips
  [1] 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 0 1 1 0 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1
 [60] 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 1

| You're the best!

  |==================================================                                                                |  44%

| Since we set the probability of landing heads on any given flip to be 0.7, we'd expect approximately 70 of our coin flips
| to have the value 1. Count the actual number of 1s contained in flips using the sum() function.

> sum(flips)
[1] 76

| You got it right!

  |=====================================================                                                             |  47%

| A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin flips), so we can use
| rbinom() to simulate a binomial random variable. Pull up the documentation for rbinom() using ?rbinom.

> ?rbinom

| Nice work!

  |=========================================================                                                         |  50%

| Each probability distribution in R has an r*** function (for "random"), a d*** function (for "density"), a p*** (for
| "probability"), and q*** (for "quantile"). We are most interested in the r*** functions in this lesson, but I encourage
| you to explore the others on your own.

...

  |=============================================================                                                     |  53%

| A binomial random variable represents the number of 'successes' (heads) in a given number of independent 'trials' (coin
| flips). Therefore, we can generate a single random variable that represents the number of heads in 100 flips of our
| unfair coin using rbinom(1, size = 100, prob = 0.7). Note that you only specify the probability of 'success' (heads) and
| NOT the probability of 'failure' (tails). Try it now.

> rbinom(1, size=100, prob=0.7)
[1] 74

| You got it!

  |================================================================                                                  |  56%

| Equivalently, if we want to see all of the 0s and 1s, we can request 100 observations, each of size 1, with success
| probability of 0.7. Give it a try, assigning the result to a new variable called flips2.

> flips2 <- rbinom(100, size=1, prob=0.7)

| Excellent work!

  |====================================================================                                              |  59%

| View the contents of flips2.

> flips2
  [1] 1 1 1 1 1 0 1 1 0 1 1 0 1 1 1 1 0 1 0 0 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1
 [60] 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 0

| Your dedication is inspiring!

  |=======================================================================                                           |  62%

| Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!

> sum(flips2)
[1] 77

| That's correct!

  |===========================================================================                                       |  66%

| Similar to rbinom(), we can use R to simulate random numbers from many other probability distributions. Pull up the
| documentation for rnorm() now.

> ?rnorm

| You're the best!

  |==============================================================================                                    |  69%

| The standard normal distribution has mean 0 and standard deviation 1. As you can see under the 'Usage' section in the
| documentation, the default values for the 'mean' and 'sd' arguments to rnorm() are 0 and 1, respectively. Thus, rnorm(10)
| will generate 10 random numbers from a standard normal distribution. Give it a try.

> rnorm(10)
 [1]  0.69976730  0.60825944  0.41358462 -0.20906075 -0.09317478 -3.19129546  0.57345210 -0.75350208 -0.02682044 -0.82248142

| Keep up the great work!

  |==================================================================================                                |  72%

| Now do the same, except with a mean of 100 and a standard deviation of 25.

> rnorm(10, mean=100, sd=25)
 [1]  56.40674 155.51067 123.50616  96.70156  85.86844 122.75216  88.10360 111.20142  61.23222  55.60807

| You are quite good my friend!

  |======================================================================================                            |  75%

| Finally, what if we want to simulate 100 *groups* of random numbers, each containing 5 values generated from a Poisson
| distribution with mean 10? Let's start with one group of 5 numbers, then I'll show you how to repeat the operation 100
| times in a convenient and compact way.

...

  |=========================================================================================                         |  78%

| Generate 5 random values from a Poisson distribution with mean 10. Check out the documentation for rpois() if you need
| help.

> ?rpois
> rpois(5, mean=10)
Error in rpois(5, mean = 10) : unused argument (mean = 10)
> rpois(5, lambda=10)
[1]  8 10 10  9  7

| You got it!

  |=============================================================================================                     |  81%

| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the result in a new variable called
| my_pois.

> my_pois <- replicate(100, rpois(5, 10))

| Great job!

  |================================================================================================                  |  84%

| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21]
[1,]    7   13    6    7   17   12    7    3   11    14    12     9    10    12    10     8     8    20    13    13    10
[2,]    8   12   12   10    6    8    9   13    6    11    10    14    12    11     7     7     8     9    12    15     7
[3,]    8    8   10   13    9   12   10    9   10    15    10     7    16    11     6    11     9     7     7    16     9
[4,]   13    7   10   11   12   13   11   11   13    10     7    11    10    15     9     6    11     7    13     6    10
[5,]    6    9   15    6    6   14    8   10   11     3     6     7    13     6     8    10    13     8    12    12     4
     [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40]
[1,]    11     6     6    11    16     7     6     8     8    11    12    10    11    10    11     6    18     9    18
[2,]    13     9    13     8    14     8     3     9    10     6     8    10     7     6    12     8    14    12     8
[3,]    12    10    12     9     9    12    15    11     7    17     7    13     9     8     7    10    11    11     9
[4,]    11    15     7    13    10     9     5    13     9     9    10     7    10     9    12    12    10    10     7
[5,]    13    10     3     4     8    10    15     8    10    11     5     8     8     9    12     9     7    13     6
     [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59]
[1,]    13     9    10    10    11     8    10     9    10    14     8    11    13    17     8     6     9     6    10
[2,]     8    13     7     8     5     5     7     9    14     8    12    11     8    12     7     9    10     5     8
[3,]     9     9    12    12    14     5    13     6     8     9    14    11     2     5    12    10    13     3    12
[4,]     6     7    11    11     6    12    12     8     9    13    10     8     5     8     8     9    12    19    12
[5,]    17     9    11    12    14    10    11    11    10    11    14     8     4    10    14    11    11     7    16
     [,60] [,61] [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] [,75] [,76] [,77] [,78]
[1,]     3    11    14     7    16     4    10     8    15    11    13    10     9     9    12    12    15    11    10
[2,]     8    13    15    10     7    11     6    11     5     9    12     9    11     7    11     7     6    13    11
[3,]     9     6    10     9    13    12    11    10    10     7    12    12     3    11    10     6    10     9    10
[4,]    12    11     7     6    13     9    14    15     8     5     9    17    13     9    14    12    16     8    17
[5,]    12     6     7    15    13     8     5     9    13    10    10     7     6    13    14    12    13     9    11
     [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97]
[1,]     7    13     7    12     7     9     7    11     5    13     8     8    13     8    11     8     8    10    12
[2,]     9     9     8    12     8    14    11    21    13     8    10     6    10    10     7     9     8    12    16
[3,]    13    13    10    10    12    13    16    20    15    11    10     6    12     5     8    16     9    13    13
[4,]     4     7    13     9     6     7    11     9    11     8     5     8    17    13    17     9    10    11    11
[5,]     8     5     6     6     9     8     9     7    12     9     9    12    11    12    15    11     9     5     7
     [,98] [,99] [,100]
[1,]    15     8      8
[2,]     9    10     11
[3,]    14    12      9
[4,]     8     8      3
[5,]    14    13      9

| Your dedication is inspiring!

  |====================================================================================================              |  88%

| replicate() created a matrix, each column of which contains 5 random numbers generated from a Poisson distribution with
| mean 10. Now we can find the mean of each column in my_pois using the colMeans() function. Store the result in a variable
| called cm.

> cm <- colMeans()
Error in is.data.frame(x) : argument "x" is missing, with no default
> cm <- colMeans(my_pois)

| Keep working like that and you'll get there!

  |=======================================================================================================           |  91%

| And let's take a look at the distribution of our column means by plotting a histogram with hist(cm).

> 
> hist(cm)

| Keep up the great work!

  |===========================================================================================================       |  94%

| Looks like our column means are almost normally distributed, right? That's the Central Limit Theorem at work, but that's
| a lesson for another day!

...

  |==============================================================================================================    |  97%

| All of the standard probability distributions are built into R, including exponential (rexp()), chi-squared (rchisq()),
| gamma (rgamma()), .... Well, you see the pattern.

...

  |==================================================================================================================| 100%

| Simulation is practically a field of its own and we've only skimmed the surface of what's possible. I encourage you to
| explore these and other functions further on your own.

...