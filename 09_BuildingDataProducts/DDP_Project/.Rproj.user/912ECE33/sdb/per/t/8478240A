{
    "contents" : "#setwd(\"C:/Users/Anuar Imanbayev/Desktop/DataScienceCourse/DSC_Working_Directory/DDP_Project\")\n\n# Load necessary libraries and dependencies\nrequire(data.table)\nlibrary(dplyr)\nlibrary(DT)\n#library(devtools)\n#library(Rcpp)\n#install_github('ramnathv/rCharts')\nlibrary(rCharts)\n\n# Read data\ndata <- fread(\"./data/SkillCraft1_Dataset.csv\")\n\n# EXPLORATORY DATA ANALYSIS\nhead(data)\n# Recode all ? as NA\ndata[data==\"?\"] <- NA\nsum(is.na(data)) # 168\nlength(data$GameId) # 3395\n# 3,395 unique SCII replays, with NA rows\nmydata <- na.omit(data)\n# Removing all rows with NA values\nlength(mydata$GameID) #3338\n# 3.338 unique SCII replays without any NA values\n\n\n# Hypothesized major predictors of SCII performance:\n# League, Age, APM\n# optional: HoursPerWeek, TotalHours, TotalMapExplored, WorkersMade, UniqueUnitsMade\n\n# League\n#table(mydata$LeagueIndex) # 1-7\n#length(table(mydata$LeagueIndex)) # 7\n# 7 separate Leagues: Bronze, Silver, Gold, Platinum, Diamond, Master, GrandMaster\n# League 8, Professional, had missing ? values recoded as NAs for Age, APM, etc.\nleagueNums <- sort(unique(mydata$LeagueIndex))\n#table(leagueNums)\n# Keeping leagues in order\nleagues <- sort(unique(mydata$LeagueIndex))\nleagues[leagues==\"1\"] <- \"Bronze\"\nleagues[leagues==\"2\"] <- \"Silver\"\nleagues[leagues==\"3\"] <- \"Gold\"\nleagues[leagues==\"4\"] <- \"Platinum\"\nleagues[leagues==\"5\"] <- \"Diamond\"\nleagues[leagues==\"6\"] <- \"Master\"\nleagues[leagues==\"7\"] <- \"GrandMaster\"\n# Recoding the dataset itself from Ordinal numbers for leagues to Characters\nmydata$LeagueIndex[mydata$LeagueIndex==\"1\"] <- \"Bronze\"\nmydata$LeagueIndex[mydata$LeagueIndex==\"2\"] <- \"Silver\"\nmydata$LeagueIndex[mydata$LeagueIndex==\"3\"] <- \"Gold\"\nmydata$LeagueIndex[mydata$LeagueIndex==\"4\"] <- \"Platinum\"\nmydata$LeagueIndex[mydata$LeagueIndex==\"5\"] <- \"Diamond\"\nmydata$LeagueIndex[mydata$LeagueIndex==\"6\"] <- \"Master\"\nmydata$LeagueIndex[mydata$LeagueIndex==\"7\"] <- \"GrandMaster\"\n\n# Age\n#table(mydata$Age) # 16-44\n# range of ages for eSports professionas between 16 to 44 years old\n#length(table(mydata$Age)) # 28\n# 28 eSport professional age groups\nages <- sort(unique(mydata$Age))\nages <- as.integer(ages)\n#table(ages)\n\n# APM (Actions per Minute)\n#table(data$APM)\n#length(mydata$APM) # 3338\napms <- sort(unique(mydata$APM))\n#table(apms)\n\n\n## R Package Functions\n\n#' Aggregate dataset by year, piece and theme\n#'\n#' @param dt data.table\n#' @param minAge\n#' @param maxAge\n#' @param minAPM\n#' @param maxAPM\n#' @param leagues\n#' @return result data.table\n#'\ngroupByAgeAll <- function(dt, minAge, maxAge, minAPM,\n                           maxAPM, leagues) {\n        result <- dt %>% filter(Age >= minAge, Age <= maxAge,\n                                APM >= minAPM, APM <= maxAPM,\n                                LeagueIndex %in% leagues)\n        return(result)\n}\n\n#' Aggregate dataset by leagues\n#'\n#' @param dt data.table\n#' @param minAge\n#' @param maxAge\n#' @param minAPM\n#' @param maxAPM\n#' @param leagues\n#' @return result data.table\n#'\ngroupByLeague <- function(dt, minAge, maxAge,\n                         minAPM, maxAPM, leagues) {\n        # use pipelining\n        dt <- groupByAgeAll(dt, minAge, maxAge, minAPM,\n                            maxAPM, leagues)\n        result <- datatable(dt, options = list(iDisplayLength = 20))\n        return(result)\n}\n\n#' Average APM for each Age Group\n#' \n#' @param dt data.table\n#' @param minAge\n#' @param maxAge\n#' @param minAPM\n#' @param maxAPM\n#' @param leagues\n#' @return data.table 2 columns\n#'\ngroupByAPMAgeAvg <- function(dt,  minAge, maxAge, minAPM,\n                            maxAPM, leagues) {\n        dt <- groupByAgeAll(dt, minAge, maxAge, minAPM,\n                             maxAPM, leagues)\n        result <- dt %>% \n                group_by(Age) %>% \n                summarise(avgAPM = mean(APM)) %>%\n                arrange(Age)\n        return(result)      \n}\n\n#' Average APM for each League\n#'\n#' @param dt data.table\n#' @param minAge\n#' @param maxAge\n#' @param minAPM\n#' @param maxAPM\n#' @param leagues\n#' @return data.table 2 columns\n#'\n#'\ngroupByAPMLeagueAvg <- function(dt,  minAge, maxAge, minAPM,\n                                 maxAPM, leagues) {\n        dt <- groupByAgeAll(dt, minAge, maxAge, minAPM,\n                             maxAPM, leagues)\n        result <- dt %>%\n                group_by(LeagueIndex) %>%\n                summarise(avgAPM = mean(APM)) %>%\n                arrange(LeagueIndex)\n        return(result)\n}\n\n#' Plot number of average pieces by year\n#' \n#' @param dt data.table\n#' @param dom\n#' @param xAxisLabel Age\n#' @param yAxisLabel APM\n#' @return themesByYear plot\nplotAPMByAgeAvg <- function(dt, dom = \"apmByAgeAvg\", \n                                xAxisLabel = \"Age\",\n                                yAxisLabel = \"APM\") {\n        \n        ampByAgeAvg <- nPlot(\n                avgAPM ~ Age,\n                data = dt,\n                type = \"lineChart\",\n                dom = dom, width = 700\n        )\n        ampByAgeAvg$chart(margin = list(left = 100))\n        ampByAgeAvg$chart(color = c('blue', 'green', 'red'))\n        ampByAgeAvg$yAxis(axisLabel = yAxisLabel, width = 70)\n        ampByAgeAvg$xAxis(axisLabel = xAxisLabel, width = 70)\n        ampByAgeAvg\n}\n\n#' Plot average APM by League\n#'\n#' @param dt data.table\n#' @param dom\n#' @param xAxisLabel league\n#' @param yAxisLabel APM\n#' @return apmByLeagueAvg plot\nplotAPMByLeagueAvg <- function(dt, dom = \"apmByLeagueAvg\",\n                                 xAxisLabel = \"Leagues\",\n                                 yAxisLabel = \"APM\") {\n        apmByLeagueAvg <- nPlot(\n                avgAPM ~ LeagueIndex,\n                data = dt,\n                type = \"multiBarChart\",\n                dom = dom, width = 700\n        )\n        apmByLeagueAvg$chart(margin = list(left = 100))\n        apmByLeagueAvg$chart(color = c('green', 'blue', 'red'))\n        apmByLeagueAvg$yAxis(axisLabel = yAxisLabel, width = 100)\n        apmByLeagueAvg$xAxis(axisLabel = xAxisLabel, width = 200,\n                               rotateLabels = -20, height = 200)\n        apmByLeagueAvg\n}\n",
    "created" : 1451102984484.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "923834633",
    "id" : "8478240A",
    "lastKnownWriteTime" : 1451116485,
    "path" : "C:/Users/Anuar Imanbayev/Desktop/DataScienceCourse/DSC_Working_Directory/DDP_Project/analysis.R",
    "project_path" : "analysis.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}